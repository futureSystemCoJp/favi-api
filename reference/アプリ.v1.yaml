openapi: 3.0.0
info:
  title: アプリAPI
  version: '1.0'
  description: |-
    ## アプリからコールされるAPI
    サーバーから返却されたユーザーキーをヘッダーに加えてリクエストして下さい。

    ### @see 
    「メールアドレス認証API」


    項目がフラグの場合、 1:true 0:false として扱って下さい。
    項目が種別の場合、種別データ定義を参照して下さい。
servers:
  - url: 'https://d32rxh06xfiiaj.cloudfront.net/api'
    description: 開発版
paths:
  /like/:
    get:
      summary: いいね一覧
      tags:
        - いいね
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  offset:
                    type: number
                  data:
                    type: array
                    items:
                      $ref: ./Exhibit.v1.yaml
                required:
                  - count
                  - offset
                  - data
      operationId: get-like
      description: ''
  '/like/{exhibitCode}/':
    parameters:
      - schema:
          type: string
        name: exhibitCode
        in: path
        required: true
    put:
      summary: いいね実行
      operationId: put-like-exhibitCode
      responses:
        '200':
          description: OK
      tags:
        - いいね
      description: いいねを新たに実行する
    delete:
      summary: いいねキャンセル
      operationId: delete-like-exhibitCode
      responses:
        '200':
          description: OK
      tags:
        - いいね
      description: いいねを取り消す
  /toDo/:
    get:
      summary: やる事リスト一覧
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./ToDo.v1.yaml
      operationId: get-toDo
      tags:
        - やる事
      description: 全て一覧で表示
  '/user/{userCode}/':
    parameters:
      - schema:
          type: string
        name: userCode
        in: path
        required: true
    get:
      summary: 他人ユーザー取得
      tags:
        - ユーザー関連
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  userCode:
                    type: number
                    description: "ユーザーID\t"
                  userNickName:
                    type: string
                    description: ニックネーム
                  userProfile:
                    type: string
                    description: 自己紹介文
                  transactCancel:
                    type: number
                    description: キャンセル回数
                  carTypeName:
                    type:
                      - string
                      - 'null'
                    description: 愛車の車種名
                  gradeName:
                    type:
                      - string
                      - 'null'
                    description: グレード名
                  userCarByeYear:
                    type:
                      - number
                      - 'null'
                    description: 購入年
                  userCarByeMonth:
                    type:
                      - number
                      - 'null'
                    description: 購入月
                  reviews:
                    type: array
                    description: ユーザーへの評価
                    items:
                      type: object
                      properties:
                        userCode:
                          type: number
                          description: ユーザーID
                        userNickName:
                          type: string
                          description: ニックネーム
                        reviewMessage:
                          type:
                            - string
                            - 'null'
                          description: 評価本文
                        reviewPolite:
                          type: number
                          description: "丁寧度点数\t"
                        reviewQuick:
                          type: number
                          description: "スピード点数\t"
                        reviewCreate:
                          type: string
                          description: 作成時刻
                      required:
                        - userCode
                        - userNickName
                        - reviewPolite
                        - reviewQuick
                        - reviewCreate
                required:
                  - userCode
                  - userNickName
                  - userProfile
                  - transactCancel
                  - reviews
      operationId: get-user-$id
      description: ''
  /coupon/:
    get:
      summary: 所有クーポン一覧
      tags:
        - ユーザー関連
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  offset:
                    type: number
                  data:
                    type:
                      - string
                      - array
                    items:
                      $ref: ./Coupon.v1.yaml
                required:
                  - count
                  - offset
                  - data
      operationId: get-coupon
      description: ''
  /register/email/:
    post:
      summary: メールアドレス仮登録
      operationId: post-register-email
      responses:
        '200':
          description: OK
      tags:
        - ユーザー登録
      parameters:
        - schema:
            type: string
            format: email
          in: query
          name: userEmail
          description: メールアドレス
          required: true
      description: |-
        入力されたメールアドレスに仮登録のメールを送信する。
        登録済みのメールアドレスでも成功します。


        ## メールが送信されます
        メールアドレスには認証URLが載っています。
        クリックすると当然、ブラウザが起動します。ブラウザから下記のURLスキームでアプリに戻ります。


        - jp.fabi://register/verify?{apiKey}
        - jp.fabi://register/verify?ユーザーキー

        jp.fabi:// のカスタムスキームでアプリに戻れる様にして下さい


        ↓ このAPIは、認証は不要です
  /register/account/:
    post:
      summary: ユーザー個人情報登録
      operationId: post-register-account
      responses:
        '200':
          description: OK
        '404':
          description: ユーザーIDが存在しない
      tags:
        - ユーザー登録
      parameters:
        - schema:
            type: string
          in: query
          name: userNameLast
          description: "氏名（姓）\t"
          required: true
        - schema:
            type: string
          in: query
          name: userNameFirst
          description: "氏名（名）\t"
          required: true
        - schema:
            type: string
          in: query
          name: userKanaLast
          description: "カナ（姓）\t"
          required: true
        - schema:
            type: string
          in: query
          name: userKanaFirst
          description: "カナ（名）\t"
          required: true
        - schema:
            type: string
            format: date
            pattern: YYYY-MM-DD
          in: query
          name: userBirth
          description: "生年月日\t"
          required: true
        - schema:
            type: string
          in: query
          name: userPostal
          description: 郵便番号
          required: true
        - schema:
            type: string
          in: query
          name: userAddress
          description: 以降の住所
          required: true
        - schema:
            type: string
          in: query
          name: userPhone
          description: 電話番号
          required: true
        - schema:
            type: string
          in: query
          name: userLicense
          description: 免許証番号
          required: true
        - schema:
            type: string
            format: date
            pattern: YYYY-MM-DD
          in: query
          name: userExpire
          description: "免許有効期限\t"
          required: true
        - schema:
            type: string
          in: query
          name: userBankCode
          description: 金融機関コード
          required: true
        - schema:
            type: string
          in: query
          name: userBankBranch
          description: 支店番号
          required: true
        - schema:
            type: string
            enum:
              - 普通
              - 当座
          in: query
          name: userBankType
          description: "預金種目\t"
          required: true
        - schema:
            type: string
          in: query
          name: userBankNumber
          description: "口座番号\t"
          required: true
        - schema:
            type: string
            pattern: カタカナ
          in: query
          name: userBankName
          description: 口座名義
          required: true
        - schema:
            type: string
          in: query
          name: userBankPost
          description: 記号（郵貯）
        - schema:
            type: string
          in: query
          name: userPass
          description: パスワード
          required: true
        - schema:
            type: string
          in: query
          name: userPref
          description: 都道府県
          required: true
        - schema:
            type: string
          in: query
          name: userCity
          description: 市区町村
          required: true
      description: |-
        金融機関コードが9900（ゆうちょ銀行）の場合、userBankPostは必須。
        それ以外の場合、userBankTypeは必須。
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
          application/json:
            schema:
              type: object
              properties: {}
          application/xml:
            schema:
              type: object
              properties: {}
        description: |
          免許証画像の File Binary 
          - 表面の名前は、 userLicence0
          - 裏面の名前は、 userLicence1

          multipart/form-data で送信して下さい。
          HTMLのForm部品と同じです
    parameters: []
  /register/profile/:
    post:
      summary: プロフィール変更
      operationId: post-register-profile
      responses:
        '302':
          description: Found
      description: ''
      tags:
        - ユーザー登録
      parameters:
        - schema:
            type: string
          in: query
          name: userNickName
          description: ニックネーム
          required: true
        - schema:
            type: string
            enum:
              - 0(男性)
              - 1(女性)
          in: query
          name: userSex
          description: 性別
          required: true
        - schema:
            type: string
          in: query
          name: userCareer
          description: 職業種別
          required: true
        - schema:
            type: number
          in: query
          name: userCarMaker
          description: メーカーID
        - schema:
            type: number
          in: query
          name: userCarType
          description: 車種ID
        - schema:
            type: number
          in: query
          name: userCarByeYear
          description: "購入年\t"
        - schema:
            type: number
          in: query
          name: userCarByeMonth
          description: "購入月\t"
        - schema:
            type: string
          in: query
          name: userProfile
          description: 自己紹介文
          required: true
        - schema: {}
          in: query
          name: userThumbnail
          description: サムネイル画像（バイナリ）
          required: true
  /search/:
    get:
      summary: 検索条件一覧
      tags:
        - 検索条件保存
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    searchCode:
                      type: number
                      description: 検索条件ID
                    searchName:
                      type: string
                      description: 検索条件名
                    data:
                      type: array
                      description: 該当する出品情報最大10件
                      items:
                        $ref: ./Exhibit.v1.yaml
                  required:
                    - searchCode
                    - searchName
      operationId: get-search
      description: 検索条件一覧
      parameters: []
    post:
      summary: 検索条件追加
      operationId: post-search
      responses:
        '200':
          description: OK
      description: ''
      tags:
        - 検索条件保存
      parameters:
        - schema:
            type: string
          in: query
          name: searchName
          description: 検索条件名
          required: true
        - schema:
            type: string
          in: query
          name: searchQuery
          description: 検索クエリ
          required: true
  '/search/{searchCode}/':
    parameters:
      - schema:
          type: string
        name: searchCode
        in: path
        required: true
    put:
      summary: 検索条件変更
      operationId: put-search-searchCode
      responses:
        '200':
          description: OK
      tags:
        - 検索条件保存
      parameters:
        - schema:
            type: number
          in: query
          name: searchFrequency
          description: 頻度種別
    delete:
      summary: 検索条件削除
      operationId: delete-search-searchCode
      responses:
        '200':
          description: OK
      tags:
        - 検索条件保存
  '/offer/price/{exhibitCode}/':
    post:
      summary: 価格相談申込
      operationId: post-offer-price
      responses:
        '200':
          description: OK
        '406':
          description: 既に価格交渉の依頼済み
      tags:
        - 交渉
      parameters:
        - schema:
            type: string
          in: query
          name: offerPrice
          description: 交渉価格
          required: true
    parameters:
      - schema:
          type: string
        name: exhibitCode
        in: path
        required: true
  '/offer/{exhibitCode}/':
    post:
      summary: 購入依頼
      operationId: post-offer
      responses:
        '200':
          description: OK
        '406':
          description: 既に購入依頼済み
      tags:
        - 交渉
      description: ''
    parameters:
      - schema:
          type: string
        name: exhibitCode
        in: path
        required: true
  '/offer/ok/{exhibitCode}/':
    post:
      summary: 売却承諾
      operationId: post-offer-ok
      responses:
        '200':
          description: OK
      tags:
        - 交渉
    parameters:
      - schema:
          type: string
        name: exhibitCode
        in: path
        required: true
  '/offer/ng/{exhibitCode}/':
    post:
      summary: 売却拒否
      operationId: post-offer-ng
      responses:
        '200':
          description: OK
      tags:
        - 交渉
    parameters:
      - schema:
          type: string
        name: exhibitCode
        in: path
        required: true
  '/transact/receive/{transactCode}/':
    parameters:
      - schema:
          type: string
        name: transactCode
        in: path
        required: true
    put:
      summary: 受取方法変更
      operationId: put-transact-receive-$transactCode
      responses:
        '200':
          description: OK
      tags:
        - 取引
      parameters:
        - schema:
            type: string
            enum:
              - 0(直接引取)
              - 1(陸送受取)
          in: query
          name: transactReceive
          description: 受取方法
          required: true
  '/transact/card/{transactCode}/':
    parameters:
      - schema:
          type: string
        name: transactCode
        in: path
        required: true
    put:
      summary: カード決済要求
      operationId: put-transact-card-transactCode
      responses:
        '200':
          description: OK
      tags:
        - 取引
      description: 未定
  '/transact/bank/{transactCode}/':
    parameters:
      - schema:
          type: string
        name: transactCode
        in: path
        required: true
    put:
      summary: 銀行振込要求
      operationId: put-transact-bank-transactCode
      responses:
        '200':
          description: OK
      tags:
        - 取引
      description: 未定
  '/transact/document/{transactCode}/':
    parameters:
      - schema:
          type: string
        name: transactCode
        in: path
        required: true
    post:
      summary: 書類アップロード
      operationId: post-transact-document-transactCode
      responses:
        '200':
          description: OK
      tags:
        - 取引
      parameters:
        - schema:
            type: number
            enum:
              - '0:委任状'
              - '1:印鑑登録証明書'
              - '2:委任状'
              - '3:車検証'
          in: query
          name: documentType
          description: 書類種別
          required: true
        - schema:
            type: string
            format: binary
          in: query
          name: documentImage
          description: 画像バイナリ
          required: true
      description: 取引に必要な書類をアップロードする
    put:
      summary: 書類受取完了報告
      operationId: put-transact-document-transactCode
      responses:
        '200':
          description: OK
      tags:
        - 取引
      description: ''
  '/transact/complete/{transactCode}/':
    parameters:
      - schema:
          type: string
        name: transactCode
        in: path
        required: true
    put:
      summary: 車両受取完了報告
      operationId: put-transact-complete-transactCode
      responses:
        '200':
          description: OK
      tags:
        - 取引
    post:
      summary: 車両発送通知
      operationId: post-transact-complete-transactCode
      responses:
        '200':
          description: OK
      tags:
        - 取引
      description: ''
  /transact/delivery/:
    post:
      summary: 陸送発送依頼
      operationId: post-transact-delivery
      tags:
        - 取引
      description: 未だ決まっていない
  '/message/{transactCode}/':
    parameters:
      - schema:
          type: string
        name: transactCode
        in: path
        required: true
    get:
      summary: 取引メッセージ一覧
      tags:
        - 取引
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./Message.v1.yaml
      operationId: get-message-transactCode
    post:
      summary: 取引メッセージ作成
      operationId: post-message-transactCode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./Message.v1.yaml
      tags:
        - 取引
      description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: messageText
          description: 本文
          required: true
  /exhibit/:
    get:
      summary: 出品情報検索
      tags:
        - 出品情報
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  offset:
                    type: number
                  data:
                    type: array
                    items:
                      $ref: ./Exhibit.v1.yaml
      operationId: get-exhibit
      description: |-
        ~フラグ の場合、true :1 , false : 0 で文字を指定して下さい。

        配列の場合、
        exhibitBodyColor[]=0&exhibitBodyColor[]=1 ...
        として複数を指定できます
      parameters:
        - schema:
            type: number
          in: query
          name: mine
          description: 自身の出品フラグ
        - schema:
            type: number
          in: query
          name: carTypeCode
          description: 車種ID
        - schema:
            type: number
          in: query
          name: modelCode
          description: モデルID
        - schema:
            type: number
          in: query
          name: exhibitPriceMin
          description: 車両価格下限
        - schema:
            type: number
          in: query
          name: exhibitPriceMax
          description: 車両価格上限
        - schema:
            type: number
          in: query
          name: profitMin
          description: お得価格下限
        - schema:
            type: number
          in: query
          name: profitMax
          description: お得価格上限
        - schema:
            type: number
          in: query
          name: yearMin
          description: 年式下限
        - schema:
            type: number
          in: query
          name: yearMax
          description: 年式上限
        - schema:
            type: number
          in: query
          name: distanceMin
          description: 走行距離下限
        - schema:
            type: number
          in: query
          name: distanceMax
          description: 走行距離上限
        - schema:
            type: number
          in: query
          name: 'prefCode[]'
          description: 都道府県種別(配列)
        - schema:
            type: number
          in: query
          name: expireMin
          description: 車検残下限
        - schema:
            type: number
          in: query
          name: expireMax
          description: 車検残上限
        - schema:
            type: number
          in: query
          name: 'exhibitBodyColor[]'
          description: ボディカラー種別(配列)
        - schema:
            type: number
          in: query
          name: exhibitRepair
          description: 修復歴フラグ
        - schema:
            type: string
          in: query
          name: 'carTypeBody[]'
          description: ボディタイプ種別(配列)
        - schema:
            type: number
          in: query
          name: carTypeExhaustMin
          description: 排気量下限
        - schema:
            type: number
          in: query
          name: carTypeExhaustMax
          description: 排気量上限
        - schema:
            type: number
          in: query
          name: carTypeFuelMin
          description: 燃費下限
        - schema:
            type: number
          in: query
          name: carTypeFuelMax
          description: 燃費上限
        - schema:
            type: number
          in: query
          name: exhibitOutPointMin
          description: 外装点数下限
        - schema:
            type: number
          in: query
          name: exhibitOutPointMax
          description: 外装点数上限
        - schema:
            type: number
          in: query
          name: exhibitInPointMin
          description: 内装点数下限
        - schema:
            type: number
          in: query
          name: exhibitInPointMax
          description: 内装点数下限
        - schema:
            type: number
          in: query
          name: exhibitMission
          description: ミッション種別
        - schema:
            type: number
          in: query
          name: exhibitGear
          description: 駆動種別
        - schema:
            type: number
          in: query
          name: exhibitSmoking
          description: 喫煙フラグ
        - schema:
            type: number
          in: query
          name: exhibitPet
          description: ペットフラグ
        - schema:
            type: number
          in: query
          name: problemMin
          description: 問題点の数下限
        - schema:
            type: number
          in: query
          name: problemMax
          description: 問題点の数上限
        - schema:
            type: string
          in: query
          name: photoMin
          description: 写真の数下限
        - schema:
            type: string
          in: query
          name: photoMax
          description: 写真の数上限
        - schema:
            type: number
          in: query
          name: 'equipementCode[]'
          description: 装備のID(配列)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
        description: ''
    post:
      summary: 出品情報登録
      operationId: post-exhibit
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  exhibitCode:
                    type: number
                    description: 出品ID
                required:
                  - exhibitCode
      parameters: []
      description: |-
        取引内容を登録。下書き状態として登録します。
        出品IDを返却するので、以後下書きの保存や公開などは、出品情報更新APIを叩いて下さい。
      tags:
        - 出品情報
  '/exhibit/{exhibitCode}/':
    parameters:
      - schema:
          type: string
        name: exhibitCode
        in: path
        required: true
    get:
      summary: 出品情報詳細
      tags:
        - 出品情報
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: ''
                properties:
                  exhibitCode:
                    type: number
                    description: "出品ID\t"
                  exhibitPrice:
                    type: number
                    description: "販売価格\t"
                  carTypeCode:
                    type: number
                    description: "車種ID\t"
                  carTypeName:
                    type: string
                    description: 車種名
                  gradeName:
                    type: string
                    description: グレード名
                  exhibitGear:
                    type: number
                    description: "駆動種別\t"
                  exhibitMission:
                    type: number
                    description: "ミッション種別\t"
                  exhibitRegisterYear:
                    type: number
                    description: "初年度登録(年)\t"
                  exhibitRegisterMonth:
                    type: number
                    description: "初年度登録(月)\t"
                  exhibitPaperExpire:
                    type:
                      - string
                      - 'null'
                    description: 車検有効期限（切れた場合null）
                  exhibitByeYear:
                    type: number
                    description: "購入年\t"
                  exhibitByeMonth:
                    type: number
                    description: "購入月\t"
                  exhibitDistanceSum:
                    type: number
                    description: "走行距離合計\t"
                  exhibitDistanceMonth:
                    type: number
                    description: "月間走行距離\t"
                  exhibitBodyColor:
                    type: number
                    description: "ボディカラー種別\t"
                  exhibitBodyColorSub:
                    type: number
                    description: "サブカラー種別\t"
                  exhibitRepair:
                    type: number
                    description: "修復履歴フラグ\t"
                  exhibitSmoking:
                    type: number
                    description: "喫煙フラグ\t"
                  exhibitPet:
                    type: number
                    description: "ペット乗車フラグ\t"
                  exhibitReport:
                    type: number
                    description: "整備記録簿フラグ\t"
                  exhibitOutPoint:
                    type: number
                    description: "外装評価点数\t"
                  exhibitInPoint:
                    type: number
                    description: "内装評価点数\t"
                  exhibitCopy:
                    type:
                      - string
                      - 'null'
                    description: "オススメポイント\t"
                  exhibitDetail:
                    type:
                      - string
                      - 'null'
                    description: "詳細説明\t"
                  exhibitSendBy:
                    type: number
                    description: "引き渡し種別\t"
                  exhibitPlacePref:
                    type: string
                    description: "都道府県\t"
                  exhibitPlaceCity:
                    type: string
                    description: "市区町村\t"
                  exhibitPlaceText:
                    type: string
                    description: "引渡し場所\t"
                  exhibitNegotiate:
                    type: number
                    description: "交渉可否フラグ\t"
                  exhibitPurchase:
                    type: number
                    description: "業者買取予想価格\t"
                  exhibitMarket:
                    type: number
                    description: "業者販売予想価格\t"
                  install:
                    type: array
                    items:
                      type: object
                      properties:
                        equipmentCode:
                          type: number
                          description: 装備ID
                        equipmentName:
                          type: string
                          description: 装備名
                        equipmentGroup:
                          type: number
                          description: 装備種別
                      required:
                        - equipmentCode
                        - equipmentName
                        - equipmentGroup
                  photo:
                    type: array
                    items:
                      type: object
                      properties:
                        photoIndex:
                          type: number
                          description: 写真番号index
                        photoParts:
                          type: number
                          description: 写真箇所種別
                        photoComment:
                          type: string
                          description: 写真コメント
                      required:
                        - photoIndex
                        - photoParts
                        - photoComment
                  damage:
                    type: array
                    items:
                      type: object
                      properties:
                        damageSection:
                          type: number
                          description: "問題箇所種別\t"
                        damageDescription:
                          type: string
                          description: "問題テキスト\t"
                      required:
                        - damageSection
                        - damageDescription
                  user:
                    type:
                      - string
                      - object
                    required:
                      - userCode
                      - userNickName
                      - userProfile
                    properties:
                      userCode:
                        type: number
                        description: ユーザーID
                      userNickName:
                        type: string
                        description: ニックネーム
                      reviewPolite:
                        type:
                          - number
                          - 'null'
                        description: 誠実さ（5点満点）
                      reviewQuick:
                        type:
                          - number
                          - 'null'
                        description: 早さ（5点満点）
                      userProfile:
                        type: string
                        description: 自己紹介文
                  comment:
                    type: object
                    required:
                      - count
                      - offset
                      - data
                    description: この取引のコメント
                    properties:
                      count:
                        type: number
                      offset:
                        type: number
                      data:
                        type: array
                        items:
                          $ref: ./Comment.v1.yaml
                required:
                  - exhibitCode
                  - exhibitPrice
                  - carTypeCode
                  - carTypeName
                  - gradeName
                  - exhibitGear
                  - exhibitMission
                  - exhibitRegisterYear
                  - exhibitRegisterMonth
                  - exhibitPaperExpire
                  - exhibitByeYear
                  - exhibitByeMonth
                  - exhibitDistanceSum
                  - exhibitDistanceMonth
                  - exhibitBodyColor
                  - exhibitBodyColorSub
                  - exhibitRepair
                  - exhibitSmoking
                  - exhibitPet
                  - exhibitReport
                  - exhibitOutPoint
                  - exhibitInPoint
                  - exhibitSendBy
                  - exhibitPlacePref
                  - exhibitPlaceCity
                  - exhibitPlaceText
                  - exhibitNegotiate
                  - exhibitPurchase
                  - exhibitMarket
                  - install
                  - photo
                  - damage
                  - user
                  - comment
      operationId: get-exhibit-exhivitCode
      description: ''
    put:
      summary: 出品情報更新
      operationId: put-exhibit-exhibitCode
      responses:
        '200':
          description: OK
      tags:
        - 出品情報
      description: |
        入力された値を出品情報に対して更新する。
        設定されたパラメータのみ更新されるので、各画面から入力された物を保存する。
      parameters:
        - schema:
            type: number
          in: query
          name: exhibitGrade
          description: "グレードID\t"
        - schema:
            type: number
          in: query
          name: exhibitGear
          description: "駆動種別\t"
        - schema:
            type: number
          in: query
          name: exhibitMission
          description: "ミッション種別\t"
        - schema:
            type: number
          in: query
          name: exhibitHandle
          description: "ハンドル種別\t"
        - schema:
            type: number
          in: query
          name: exhibitRegisterYear
          description: "初年度登録(年)\t"
        - schema:
            type: number
          in: query
          name: exhibitRegisterMonth
          description: "初年度登録(月)\t"
        - schema:
            type: string
            format: date
            pattern: YYYY-MM-DD
          in: query
          name: exhibitPaperExpire
          description: "車検有効期限\t"
        - schema:
            type: string
          in: query
          name: exhibitNumberPlace
          description: "ナンバー試験場\t"
        - schema:
            type: string
          in: query
          name: exhibitNumberGroup
          description: "ナンバー上3桁\t"
        - schema:
            type: string
          in: query
          name: exhibitNumberKana
          description: "ナンバーかな\t"
        - schema:
            type: string
          in: query
          name: exhibitNumberCode
          description: "ナンバー下4桁\t"
        - schema:
            type: string
          in: query
          name: exhibitCarNumber
          description: "車体番号\t"
        - schema:
            type: number
          in: query
          name: exhibitByeYear
          description: "購入年\t"
        - schema:
            type: number
          in: query
          name: exhibitByeMonth
          description: "購入月\t"
        - schema:
            type: number
          in: query
          name: exhibitDistanceSum
          description: "走行距離合計\t"
        - schema:
            type: number
          in: query
          name: exhibitDistanceMonth
          description: "月間走行距離\t"
        - schema:
            type: number
          in: query
          name: exhibitBodyColor
          description: "ボディカラー種別\t"
        - schema:
            type: number
          in: query
          name: exhibitBodyColorSub
          description: "サブカラー種別\t"
        - schema:
            type: number
          in: query
          name: exhibitRepair
          description: 修復履歴フラグ
        - schema:
            type: number
          in: query
          name: exhibitSmoking
          description: "喫煙フラグ\t"
        - schema:
            type: number
          in: query
          name: exhibitPet
          description: "ペット乗車フラグ\t"
        - schema:
            type: number
          in: query
          name: exhibitReport
          description: "整備記録簿フラグ\t"
        - schema:
            type: number
          in: query
          name: exhibitOutPoint
          description: "外装評価点数\t"
        - schema:
            type: number
          in: query
          name: exhibitInPoint
          description: "内装評価点数\t"
        - schema:
            type: string
          in: query
          name: exhibitCopy
          description: "オススメポイント\t"
        - schema:
            type: string
          in: query
          name: exhibitDetail
          description: "詳細説明\t"
        - schema:
            type: number
          in: query
          name: exhibitSendBy
          description: "引き渡し種別\t"
        - schema:
            type: string
          in: query
          name: exhibitPlacePref
          description: 都道府県
        - schema:
            type: string
          in: query
          name: exhibitPlaceCity
          description: 市区町村
        - schema:
            type: string
          in: query
          name: exhibitPlaceText
          description: 引渡し場所
        - schema:
            type: number
          in: query
          name: exhibitNegotiate
          description: 交渉可否フラグ
        - schema:
            type: string
          in: query
          name: exhibitSection
          description: 類別区分番号
        - schema:
            type: string
          in: query
          name: exhibitNumber
          description: 型式指定番号
  /exhibit/price/:
    get:
      summary: 価格分布取得
      tags:
        - 出品情報
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price:
                    type: object
                    description: 価格
                    required:
                      - min
                      - max
                      - range
                    properties:
                      min:
                        type: number
                        description: 最小価格
                      max:
                        type: number
                        description: 最大価格
                      range:
                        type: array
                        description: 価格分布
                        items:
                          type: object
                          properties:
                            price:
                              type: number
                              description: 価格帯
                            count:
                              type: number
                              description: 該当台数
                          required:
                            - price
                            - count
                  value:
                    type: object
                    description: お得度
                    required:
                      - min
                      - max
                      - range
                    properties:
                      min:
                        type: number
                        description: 最低お得価格
                      max:
                        type: number
                        description: 最大お得価格
                      range:
                        type: array
                        description: 分布
                        items:
                          type: object
                          properties:
                            price:
                              type: number
                              description: お得価格帯
                            count:
                              type: number
                              description: 該当台数
                          required:
                            - price
                            - count
                required:
                  - price
                  - value
      operationId: get-exhibit-price
      description: |-
        選択された車種（任意）の車両価格の分布を返却する。
        出品情報検索APIと同じクエリパラメータを受け入れる。
      parameters: []
  /history/:
    get:
      summary: 閲覧履歴一覧
      tags:
        - 出品情報
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  offset:
                    type: number
                  data:
                    type: array
                    items:
                      $ref: ./Exhibit.v1.yaml
        '':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  offset:
                    type: number
                  data:
                    type:
                      - string
                      - array
                    items:
                      $ref: ./Exhibit.v1.yaml
                required:
                  - count
                  - offset
                  - data
      operationId: get-history
      description: 閲覧した時間の降順で表示
  /inform/:
    get:
      summary: 全体お知らせ一覧
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  offset:
                    type: number
                  data:
                    type: array
                    items:
                      $ref: ''
                required:
                  - count
                  - offset
                  - data
      operationId: get-inform
      tags:
        - お知らせ
  '/inform/{informCode}/':
    parameters:
      - schema:
          type: string
        name: informCode
        in: path
        required: true
    get:
      summary: 全体お知らせ取得
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./Inform.v1.yaml
      operationId: get-inform-informCode
      tags:
        - お知らせ
  /notify/:
    get:
      summary: 自分宛お知らせ一覧
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./Notify.v1.yaml
      operationId: get-notify
      description: ''
      tags:
        - お知らせ
  '/notify/{notifyCode}/':
    parameters:
      - schema:
          type: string
        name: notifyCode
        in: path
        required: true
    get:
      summary: 貴方宛お知らせ取得
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./Notify.v1.yaml
      operationId: get-notify-notifyCode
      tags:
        - お知らせ
  /init/:
    get:
      summary: 初期化処理
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                    description: |
                      ユーザーキー
                  exhibit:
                    type: object
                    required:
                      - count
                      - offset
                      - data
                    properties:
                      count:
                        type: number
                      offset:
                        type: number
                      data:
                        type: array
                        items:
                          $ref: ./Exhibit.v1.yaml
                  toDo:
                    type: array
                    items:
                      $ref: ./ToDo.v1.yaml
                  inform:
                    type: object
                    required:
                      - count
                      - offset
                      - data
                    properties:
                      count:
                        type: number
                      offset:
                        type: number
                      data:
                        type: array
                        items:
                          $ref: ./Inform.v1.yaml
                  notify:
                    type: array
                    items:
                      $ref: ''
                required:
                  - apiKey
                  - exhibit
                  - toDo
                  - inform
                  - notify
        '403':
          description: ユーザーは管理者から強制退会措置を受けています
      operationId: get-init
      description: |-
        このAPIはアプリ起動時に必ず一度呼ばれるAPIです。
        アプリ起動時に必要な情報を一覧で返します。

        #### インストール後の初回起動時の挙動
        未だユーザーキーを持っていない為、ユーザーキーを返却します。
        返されたユーザーキーを保存して下さい。
      tags:
        - Initializer
      parameters:
        - schema:
            type: string
          in: query
          name: userFcmID
          description: |
            FireBaseのトークン
        - schema:
            type: string
          in: query
          name: userDevice
          description: |-
            Android : android ID , 
            iOS : 広告ID
  '/comment/{exhibitCode}/':
    parameters:
      - schema:
          type: string
        name: exhibitCode
        in: path
        required: true
    get:
      summary: 取引コメント取得
      tags:
        - コメント
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  offset:
                    type: number
                  data:
                    type: array
                    items:
                      $ref: ./Comment.v1.yaml
      operationId: get-comment-exhibitCode
      description: ''
    post:
      summary: コメント投稿
      operationId: post-comment-exhibitCode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./Comment.v1.yaml
      description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: commentText
          description: "本文\t"
          required: true
      tags:
        - コメント
  /tag/:
    get:
      summary: タグ一覧
      tags:
        - 出品情報
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tagCode:
                      type: number
                      description: タグID
                    tagName:
                      type: string
                      description: タグ名称
                    tagType:
                      type: number
                      description: タグ種別
                  required:
                    - tagCode
                    - tagName
                    - tagType
      operationId: get-tag
      description: タグ一覧を取得する
  /car-type/:
    get:
      summary: 車種一覧
      tags:
        - マスタ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    carTypeCode:
                      type: number
                      description: 車種ID
                    carTypeName:
                      type: string
                      description: 車種名
                    carTypeBody:
                      type: number
                      description: ボディタイプ種別
                    carTypeMaker:
                      type: number
                      description: メーカーID
                    exhibits:
                      type: number
                      description: 有効な出品総数
                  required:
                    - carTypeCode
                    - carTypeName
                    - carTypeBody
                    - carTypeMaker
                    - exhibits
      operationId: get-carType
      description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: makerCode
          description: メーカーID
    parameters: []
  /maker/:
    get:
      summary: メーカー一覧
      tags:
        - マスタ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    makerCode:
                      type: number
                      description: メーカーID
                    makerName:
                      type: string
                      description: メーカー名
                    makerCountry:
                      type: number
                      description: 国種別
                    exhibits:
                      type: number
                      description: 有効な出品総数
                    makerPopular:
                      type: number
                      description: 人気フラグ
                  required:
                    - makerCode
                    - makerName
                    - makerCountry
                    - exhibits
                    - makerPopular
      operationId: get-maker
      parameters:
        - schema:
            type: string
          in: query
          name: makerCountry
          description: 国種別
  /exhibit/count/:
    get:
      summary: 検索ヒット数取得
      tags:
        - 出品情報
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  hit:
                    type: number
                    description: ヒット件数
      operationId: get-exhibit-count
      parameters: []
      description: |-
        絞り込み条件に合致する、有効な出品件数を取得する。
        出品情報検索APIと同じクエリパラメータを受け入れる。
  '/report/{exhibitCode}/':
    parameters:
      - schema:
          type: string
        name: exhibitCode
        in: path
        required: true
    put:
      summary: 通報
      operationId: put-report-exhibitCode
      tags:
        - 出品情報
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: number
          in: query
          name: reportReason
          description: 報告理由種別
          required: true
        - schema:
            type: string
          in: query
          name: reportDetail
          description: 報告詳細
          required: true
  /user/logout/:
    get:
      summary: ログアウト処理
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  userKey:
                    type: string
                    description: ユーザーキー
      operationId: get-user-logout
  /transact/:
    get:
      summary: 取引一覧
      tags:
        - 取引
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./Exhibit.v1.yaml
      operationId: get-transact
  '/transact/{transactCode}/':
    parameters:
      - schema:
          type: string
        name: transactCode
        in: path
        required: true
    delete:
      summary: 取引キャンセル
      operationId: delete-transact-transactCode
      responses:
        '200':
          description: OK
      tags:
        - 取引
  '/transact/post/{transactCode}/':
    parameters:
      - schema:
          type: string
        name: transactCode
        in: path
        required: true
    post:
      summary: 書類発送通知
      operationId: post-transact-post-transactCode
      responses:
        '200':
          description: OK
      tags:
        - 取引
  '/transact/review/{transactCode}/':
    parameters:
      - schema:
          type: string
        name: transactCode
        in: path
        required: true
    post:
      summary: 評価投稿
      operationId: post-transact-review-transactCode
      responses:
        '200':
          description: OK
      tags:
        - 取引
      parameters:
        - schema:
            type: string
          in: query
          name: reviewPolite
          description: 丁寧度点数
          required: true
        - schema:
            type: string
          in: query
          name: reviewQuick
          description: スピード点数
          required: true
        - schema:
            type: string
          in: query
          name: reviewMessage
          description: 評価本文
  /car-type/market/:
    get:
      summary: 相場取得
      tags:
        - マスタ
      operationId: get-carType-market
      parameters:
        - schema:
            type: number
          in: query
          name: carTypeCode
          description: 車種ID
        - schema:
            type: number
          in: query
          name: gradeCode
          description: グレードID
        - schema:
            type: number
          in: query
          name: carTypeYear
          description: 年式（年）
        - schema:
            type: number
          in: query
          name: carTypeMonth
          description: 年式(月)
        - schema:
            type: number
          in: query
          name: carTypeDistance
          description: 走行距離
        - schema:
            type: number
          in: query
          name: carExpireYear
          description: 車検期限（年）
        - schema:
            type: number
          in: query
          name: carExpireMonth
          description: 車検期限（月）
        - schema:
            type: number
          in: query
          name: carCleanIn
          description: 内装点数
        - schema:
            type: number
          in: query
          name: carCleanOut
          description: 外装点数
      responses:
        '200':
          description: OK
      description: レスポンスフォーマット未定
    parameters: []
  /grade/:
    get:
      summary: グレード一覧
      tags:
        - マスタ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gradeCode:
                      type: number
                      description: グレードID
                    gradeName:
                      type: string
                      description: グレード名
      operationId: get-grade
      parameters:
        - schema:
            type: number
          in: query
          name: gradeCarType
          description: 車種ID
        - schema:
            type: string
          in: query
          name: gradeType
          description: 型式
        - schema:
            type: string
          in: query
          name: yearNumber
          description: 型式指定番号
        - schema:
            type: string
          in: query
          name: yearSection
          description: 類別区分番号
      description: 該当するグレードの一覧を出力する
  /equipment/:
    get:
      summary: 装備一覧取得
      tags:
        - マスタ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    equipementCode:
                      type: number
                      description: 装備ID
                    equipementName:
                      type: string
                      description: 装備名
                    equipmentGroup:
                      type: number
                      description: 装備種別
      operationId: get-equipment
  /register/verify/:
    post:
      summary: メールアドレス認証API
      operationId: post-register-veryify
      responses:
        '200':
          description: 成功したのでユーザーIDを返す。
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                    description: ユーザーキー
                required:
                  - apiKey
        '400':
          description: メールアドレスが存在しないか、数字6桁が一致しない
      description: |-
        ### こちら使わなくなりました


        仮登録メールに記載されたランダムな数字とメールアドレスを基に
        ユーザー登録を行う。

        ### 重要
        戻り値として、ユーザーキー （ userKey ) を返す。

        ユーザーキーは自分のIDなので、アプリで保存してください。
        今後、他のAPIを使う際には、ユーザーキーを必ずヘッダーに加えて下さい


        ↓ このAPIは、認証は不要です
      parameters:
        - schema:
            type: string
          in: query
          name: userEmail
          description: メールアドレス
          required: true
        - schema:
            type: string
          in: query
          name: tempPass
          description: メール記載の数字6桁
          required: true
        - schema:
            type: string
          in: query
          name: userFcmID
          description: FireBaseのFCM ID
        - schema:
            type: string
          in: query
          name: userDevice
          description: 広告用の端末ID
      tags:
        - ユーザー登録
      deprecated: true
    parameters: []
  /register/google/:
    post:
      summary: Googleで登録
      operationId: post-register-google
      responses:
        '200':
          description: 会員の仮登録が行われた
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                    description: ユーザーキー
        '302':
          description: |-
            既に会員登録が済んでいるユーザー
            ログインされたものと同じように扱って下さい
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                    description: ユーザーキー
                required:
                  - apiKey
      description: |-
        Googleでログイン or 会員登録する
        この APIを通すとメールアドレス認証のフローをスキップできる

        ### フロー
        - 200 会員登録フローを続ける
        - 302 既に登録済み（機種変更など）なのでログインした扱い

        ### 重要
        戻り値として、ユーザーキー （ userKey ) を返す。

        ユーザーキーは自分のIDなので、アプリで保存してください。
        今後、他のAPIを使う際には、ユーザーキーを必ずヘッダーに加えて下さい


        ↓ このAPIは、認証は不要です
      parameters:
        - schema:
            type: string
          in: query
          name: userGoogle
          description: Google認証で取得したID
          required: true
        - schema:
            type: string
          in: query
          name: userEmail
          description: メールアドレス
      tags:
        - ユーザー登録
  /register/face-book/:
    post:
      summary: FaceBookで登録
      operationId: post-register-face-book
      responses:
        '200':
          description: 会員の仮登録が行われた
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                    description: ユーザーキー
                required:
                  - apiKey
        '302':
          description: |-
            既に会員登録が済んでいるユーザー
            ログインされたものと同じように扱って下さい
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                    description: ユーザーキー
                required:
                  - apiKey
      tags:
        - ユーザー登録
      description: |-
        FaceBookでログイン or 会員登録する
        この APIを通すとメールアドレス認証のフローをスキップできる


        ### フロー
        - 200 会員登録フローを続ける
        - 302 既に登録済み（機種変更など）なのでログインした扱い


        ### 重要
        戻り値として、ユーザーキー （ userKey ) を返す。

        ユーザーキーは自分のIDなので、アプリで保存してください。
        今後、他のAPIを使う際には、ユーザーキーを必ずヘッダーに加えて下さい


        ↓ このAPIは、認証は不要です
      parameters:
        - schema:
            type: string
          in: query
          name: userEmail
          description: メールアドレス
        - schema:
            type: string
          in: query
          name: userFaceBook
          description: FaceBook認証で取得するキー
          required: true
  /bank/:
    get:
      summary: 金融機関一覧取得
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    bankCode:
                      type: number
                      description: 金融機関コード
                    bankName:
                      type: string
                      description: 金融機関名
      operationId: get-bank
      description: 金融機関一覧を取得する
      tags:
        - マスタ
  /bank/branch/:
    get:
      summary: 支店一覧取得API
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    branchCode:
                      type: number
                      description: 支店ID
                    branchName:
                      type: string
                      description: 支店名
      operationId: get-bank-branch
      description: 金融機関を指定してその支店一覧を取得します
      parameters:
        - schema:
            type: number
          in: query
          name: bankCode
          description: 金融機関コード
          required: true
      tags:
        - マスタ
  '/exhibit/equipment/{exhibitCode}/':
    post:
      summary: 出品 - 装備品登録
      operationId: post-exhibit-equipment
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: number
          in: query
          name: 'equipmentCode[]'
          description: 装備品ID（配列）
          required: true
        - schema:
            type: string
          in: query
          name: deleteUnspecified
          description: 未指定削除フラグ
      description: |-
        指定した出品IDに対して、装備品を追加します。
        装備品IDは、複数指定できます。

        ( example )
        equipmentCode[]=1&equipmentCode[]=2

        ## 未指定削除フラグとは？
        1を指定すると、指定しなかった装備品IDを削除するようにします。
        書き換えに使えます。
      tags:
        - 出品情報
    parameters: []
  /part/:
    get:
      summary: 出品箇所定義一覧
      tags:
        - マスタ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    partCode:
                      type: string
                      description: 問題箇所ID
                    partName:
                      type: string
                      description: 問題箇所名
                    partGroup:
                      type: number
                      description: 問題箇所種別
      operationId: get-part
      description: |-
        問題箇所の一覧を取得

        partGroupは定義マスタの問題箇所種別を参照して下さい。

        https://future-system-co-jp.stoplight.io/docs/favi-api/docs/%E5%AE%9A%E7%BE%A9%E3%83%9E%E3%82%B9%E3%82%BF.md#%E5%95%8F%E9%A1%8C%E7%AE%87%E6%89%80%E7%A8%AE%E5%88%A5
  '/problem/{exhibitCode}/':
    get:
      summary: 問題箇所取得API
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    problemPart:
                      type: string
                      description: 問題箇所ID
                    problemText:
                      type: string
                      description: 問題内容
                    problemThumbnail:
                      type: string
                      description: サムネイル
      operationId: get-exhibit-problem
      description: |-
        既に設定済みの問題箇所の一覧を取得する
        problemPartは、問題箇所一覧のAPIを参照して下さい。

        [問題箇所一覧のAPI](../~1part~1/get)
      parameters: []
      tags:
        - 出品情報
    parameters:
      - schema:
          type: string
        name: exhibitCode
        in: path
        required: true
    post:
      summary: 問題箇所登録API
      operationId: post-exhibit-problem-exhibitCode
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
          in: query
          name: problemPart
          description: 問題箇所ID
          required: true
        - schema:
            type: string
          in: query
          description: サムネイル画像（バイナリ）
          name: problemThumbnail
        - schema:
            type: string
          in: query
          name: problemText
          description: 問題内容テキスト
      description: |-
        問題箇所を保存する。
        その問題箇所が既に設定済みであれば、上書きします。
      tags:
        - 出品情報
    delete:
      summary: 問題箇所削除API
      operationId: delete-problem-exhibitCode
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
          in: query
          name: problemPart
          description: 問題箇所ID
      tags:
        - 出品情報
  /user/me/:
    get:
      summary: 自分の情報取得API
      tags:
        - ユーザー登録
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  userCode:
                    type: number
                    description: ユーザーID
                  userName:
                    type: string
                    description: ユーザー名
                  userEmail:
                    type: string
                    description: メールアドレス
                  userStatus:
                    type: number
                    description: '0:仮登録,1:本登録'
      operationId: get-user-me
      description: 自分がログインしているユーザー情報を取得する
  /angle/:
    get:
      summary: アングル一覧
      tags:
        - マスタ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    angleCode:
                      type: string
                      description: アングルID
                    angleName:
                      type: string
                      description: アングル名
                    angleFile:
                      type: string
                      description: ファイル名
                    angleGroup:
                      type: number
                      description: アングル種別
                  required:
                    - angleCode
                    - angleName
                    - angleFile
                    - angleGroup
      operationId: get-angle
      description: |
        写真アングルの定義です。

        下記のフォルダに画像ファイルが入っています。
        https://drive.google.com/drive/folders/1H6NjuJu-oDvGYbXcfBIgIjg2QwpFjdWz?usp=sharing


        angleFile -> Google Driveのファイル名に合致します。


        angleGroup
        https://future-system-co-jp.stoplight.io/docs/favi-api/docs/%E5%AE%9A%E7%BE%A9%E3%83%9E%E3%82%B9%E3%82%BF.md
  '/photo/{exhibitCode}/':
    parameters:
      - schema:
          type: string
        name: exhibitCode
        in: path
        required: true
    get:
      summary: 出品写真取得API
      tags:
        - 出品情報
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    photoExhibit:
                      type: string
                      description: 出品ID
                    photoAngle:
                      type: string
                      description: アングルID
                    photoComment:
                      type: string
                      description: テキスト
                    photoThumbnail:
                      type: string
                      description: サムネイル
                  required:
                    - photoExhibit
                    - photoAngle
      operationId: get-photo-exhibitCode
      description: |-
        出品時の車両画像を取得する。
        photoAngleは、アングル一覧APIを参照して下さい。

        [アングル一覧のAPI](../~1angle~1/get)
    post:
      summary: 出品写真登録API
      operationId: post-photo-exhibitCode
      responses:
        '200':
          description: OK
      description: |
        出品写真を保存する。 そのアングルの写真が既に設定済みであれば、上書きします。
      parameters:
        - schema:
            type: string
          in: query
          name: photoAngle
          description: アングルID
          required: true
        - schema:
            type: string
          in: query
          name: photoComment
          description: テキスト
        - schema:
            type: string
          in: query
          name: photoThumbnail
          description: サムネイル画像（バイナリ）
      tags:
        - 出品情報
    delete:
      summary: 出品写真削除API
      operationId: delete-photo-exhibitCode
      responses:
        '200':
          description: OK
      tags:
        - 出品情報
      description: 出品した写真を削除します
      parameters:
        - schema:
            type: string
          in: query
          name: photoAngle
          description: アングルID
          required: true
  /user/login/:
    post:
      summary: ログイン実行
      operationId: post-user-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                    description: ユーザーキー
                required:
                  - apiKey
        '401':
          description: ログイン失敗
      parameters:
        - schema:
            type: string
          in: query
          name: userEmail
          description: メールアドレス
          required: true
        - schema:
            type: string
          in: query
          name: userPass
          description: パスワード
          required: true
      tags:
        - ユーザー関連
  /exhibit/qrk/:
    get:
      summary: 軽自動車QRコードAPI
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  gradeCode:
                    type: string
                    description: グレードID
                  gradeName:
                    type: string
                    description: グレード名
                  gradeDrive:
                    type: string
                    description: 定義マスタ -> 駆動種別
                  carTypeCode:
                    type: string
                    description: 車種ID
                  carTypeName:
                    type: string
                    description: 車種名
                  exhibitRegisterYear:
                    type: string
                    description: 初年度登録（年)
                  exhibitRegisterMonth:
                    type: string
                    description: 初年度登録（月)
                  exhibitPaperExpire:
                    type: string
                    description: 車検有効期限(yyyy-MM-dd)
                  exhibitNumberPlace:
                    type: string
                    description: ナンバー試験場
                  exhibitNumberGroup:
                    type: string
                    description: ナンバー上3桁
                  exhibitNumberKana:
                    type: string
                    description: ナンバーかな
                  exhibitNumberCode:
                    type: string
                    description: ナンバー下4桁
                  exhibitCarNumber:
                    type: string
                    description: 車体番号
                  exhibitHandle:
                    type: string
                    description: 定義マスタ ハンドル種別
                  exhibitMission:
                    type: string
                    description: 定義マスタ ミッション種別
        '404':
          description: 車両が見つからない
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: get-exhibit-qrk
      description: |-
        軽自動車のQRコード３つを読み込んで、車体情報を返却するAPI
        https://cacoo.com/diagrams/U9Dx501vK8E4ovgx/1D16C

        404の場合は、車両が見つかりません
        200の場合は、車両が見つかりました。

        200でプロパティがNULLの場合、データがありませんので、選択させてください。
      parameters:
        - schema:
            type: string
          in: query
          name: qrCode0
          description: 右から３つ目のQRコード
          required: true
        - schema:
            type: string
          in: query
          name: qrCode1
          description: 右から２つ目のQRコード
          required: true
        - schema:
            type: string
          in: query
          name: qrCode2
          description: 右から１つ目のQRコード
          required: true
      tags:
        - 出品情報
  /exhibit/qr/:
    get:
      summary: 普通車QRコードAPI
      tags:
        - 出品情報
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  gradeCode:
                    type: string
                    description: グレードID
                  gradeName:
                    type: string
                    description: グレード名
                  gradeDrive:
                    type: string
                    description: 定義マスタ -> 駆動種別
                  carTypeCode:
                    type: string
                    description: 車種ID
                  carTypeName:
                    type: string
                    description: 車種名
                  exhibitRegisterYear:
                    type: string
                    description: 初年度登録（年)
                  exhibitRegisterMonth:
                    type: string
                    description: 初年度登録（月)
                  exhibitPaperExpire:
                    type: string
                    description: 車検有効期限(yyyy-MM-dd)
                  exhibitNumberPlace:
                    type: string
                    description: ナンバー試験場
                  exhibitNumberGroup:
                    type: string
                    description: ナンバー上3桁
                  exhibitNumberKana:
                    type: string
                    description: ナンバーかな
                  exhibitCarNumber:
                    type: string
                    description: ナンバー下4桁
                  exhibitHandle:
                    type: string
                    description: 定義マスタ ハンドル種別
                  exhibitMission:
                    type: string
                    description: 定義マスタ ミッション種別
        '404':
          description: 車両が見つからない
      operationId: get-exhibit-qr
      description: |-
        普通自動車のQRコード4つを読み込んで、車体情報を返却するAPI
        https://cacoo.com/diagrams/U9Dx501vK8E4ovgx/3BEA0

        404の場合は、車両が見つかりません
        200の場合は、車両が見つかりました。

        200でプロパティがNULLの場合、データがありませんので、選択させてください。
      parameters:
        - schema:
            type: string
          in: query
          name: qrCode0
          description: 左から2つ目のQRコード
          required: true
        - schema:
            type: string
          in: query
          name: qrCode1
          description: 左から3つ目のQRコード
          required: true
        - schema:
            type: string
          in: query
          name: qrCode2
          description: 左から4つ目のQRコード
          required: true
        - schema:
            type: string
          in: query
          name: qrCode3
          description: 左から5つ目のQRコード
          required: true
        - schema:
            type: string
          in: query
          name: qrCode4
          description: 左から6つ目のQRコード
  /model/:
    get:
      summary: モデル一覧
      tags:
        - マスタ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    modelName:
                      type: string
                      description: モデル名
                    modelCode:
                      type: number
                      description: モデルID
      operationId: get-model
      parameters:
        - schema:
            type: string
          in: query
          name: carTypeCode
          description: 車種ID
      description: |
        車種に紐つくモデルを一覧で返す
  /country/:
    get:
      summary: 国一覧
      tags:
        - マスタ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    countryCode:
                      type:
                        - string
                        - number
                      description: 国ID
                    countryName:
                      type: string
                      description: 国名
      operationId: get-country
components:
  schemas: {}
  securitySchemes:
    ユーザーキー:
      name: apiKey
      type: apiKey
      in: header
      description: ''
tags:
  - name: ユーザー登録
security:
  - ユーザーキー: []
